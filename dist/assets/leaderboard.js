let c=null;const i="0x7c8",y={chainId:i,chainName:"Sanko Testnet",nativeCurrency:{name:"tDMT",symbol:"tDMT",decimals:18},rpcUrls:["https://sanko-arb-sepolia.rpc.caldera.xyz/http"],blockExplorerUrls:["https://explorer.testnet.sanko.xyz"]};function b(s,e){const t=parseInt(s.replace("#",""),16),n=Math.round(2.55*e),o=(t>>16)+n,a=(t>>8&255)+n,r=(t&255)+n;return"#"+(16777216+(o<255?o<1?0:o:255)*65536+(a<255?a<1?0:a:255)*256+(r<255?r<1?0:r:255)).toString(16).slice(1)}class f{constructor(){if(console.log("Initializing LeaderboardManager..."),c)return console.log("Returning existing LeaderboardManager instance"),c;if(c=this,this.leaderboardData=[],this.subscription=null,!window.gameDatabase){console.error("Error: gameDatabase not initialized");return}this.loadLeaderboard(),this.setupRealtimeSubscription(),console.log("LeaderboardManager initialization complete")}setupRealtimeSubscription(){try{console.log("Setting up realtime subscription..."),this.subscription=window.gameDatabase.channel("leaderboard-changes").on("postgres_changes",{event:"*",schema:"public",table:"leaderboard"},e=>{console.log("Received leaderboard update:",e),this.loadLeaderboard()}).subscribe(),console.log("Realtime subscription setup complete")}catch(e){console.error("Error setting up subscription:",e)}}async loadLeaderboard(){try{console.log("Loading leaderboard data...");const{data:e,error:t}=await window.gameDatabase.from("leaderboard").select("*").order("points",{ascending:!1});if(t)throw t;console.log("Leaderboard data loaded:",e),this.leaderboardData=e||[],await this.displayLeaderboard()}catch(e){console.error("Error loading leaderboard:",e);const t=document.getElementById("leaderboard-body");t&&(t.innerHTML=`<tr><td colspan="5">Error loading leaderboard: ${e.message}</td></tr>`)}}async displayLeaderboard(){try{console.log("Displaying leaderboard...");const e=document.getElementById("leaderboard-body");if(!e)throw new Error("Leaderboard tbody element not found");if(!this.leaderboardData)throw new Error("No leaderboard data available");console.log("Generating leaderboard HTML for",this.leaderboardData.length,"entries"),e.innerHTML=this.leaderboardData.map((t,n)=>{const o=this.formatAddress(t.username);return`
                    <tr>
                        <td>${n+1}</td>
                        <td>[DMT] ${o}</td>
                        <td>${t.points}</td>
                        <td>${t.wins}/${t.losses}/${t.draws}</td>
                        <td>${t.total_games}</td>
                    </tr>
                `}).join(""),console.log("Leaderboard displayed successfully")}catch(e){console.error("Error displaying leaderboard:",e);const t=document.getElementById("leaderboard-body");t&&(t.innerHTML=`<tr><td colspan="5">Error displaying leaderboard: ${e.message}</td></tr>`)}}async updateScore(e,t,n){if(!e){console.error("No wallet address provided");return}try{console.log("Updating score for:",{walletAddress:e,gameResult:t,difficulty:n});const{data:o}=await window.gameDatabase.from("leaderboard").select("*").eq("username",e).maybeSingle();console.log("Existing record:",o);const a=((o==null?void 0:o.wins)||0)+(t==="win"?1:0),r=((o==null?void 0:o.losses)||0)+(t==="loss"?1:0),l=((o==null?void 0:o.draws)||0)+(t==="draw"?1:0),u=a+r+l,m=t==="win"?n==="hard"?5:3:t==="draw"?1:0,g=((o==null?void 0:o.points)||0)+m,p={username:e,chain_type:"evm",wins:a,losses:r,draws:l,total_games:u,points:g,updated_at:new Date().toISOString()};console.log("Upserting record:",p);const{error:w}=await window.gameDatabase.from("leaderboard").upsert(p,{onConflict:"username"});if(w)throw w;console.log("Successfully updated leaderboard"),await this.loadLeaderboard()}catch(o){console.error("Error updating score:",o)}}formatAddress(e){return e?`${e.slice(0,4)}...${e.slice(-4)}`:""}}class E{constructor(){console.log("Initializing WalletConnector..."),this.evmProvider=this.selectEVMProvider(),this.address=null,this.network=null,this.listeners={}}on(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)}emit(e,t){this.listeners[e]&&this.listeners[e].forEach(n=>n(t)),document.dispatchEvent(new CustomEvent(e,{detail:t}))}selectEVMProvider(){if(!window.ethereum)return null;if(window.ethereum.isMetaMask)return window.ethereum;if(window.ethereum.providers){const e=window.ethereum.providers.find(t=>t.isMetaMask);return e||window.ethereum.providers[0]||window.ethereum}return window.ethereum}async connectWallet(e){console.log(`Attempting to connect ${e} wallet...`);try{if(e!=="sanko-testnet")throw new Error("Only Sanko Testnet is supported");return await this.connectEVMWallet(!0)}catch(t){throw console.error(`Error connecting ${e} wallet:`,t),alert(`Failed to connect ${e} wallet: ${t.message}`),t}}async connectEVMWallet(e=!0){try{if(!window.ethereum)throw new Error("No EVM wallet detected. Please install MetaMask.");const t=new ethers.providers.Web3Provider(window.ethereum);await t.send("eth_requestAccounts",[]);const o=await t.getSigner().getAddress(),a=await window.ethereum.request({method:"eth_chainId"});if(console.log(`Current chainId: ${a}, Target chainId: ${i}`),a!==i)try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:i}]})}catch(l){if(l.code===4902)await window.ethereum.request({method:"wallet_addEthereumChain",params:[y]});else throw new Error("Please switch to Sanko Testnet.")}console.log(`Authenticating wallet: ${o}`);const{error:r}=await window.gameDatabase.rpc("set_current_player",{player_address:o});if(r)throw new Error(`Failed to authenticate wallet: ${r.message}`);return this.address=o,this.network="evm",localStorage.setItem("currentPlayer",o),localStorage.setItem("walletType","sanko-testnet"),localStorage.setItem("chainType","evm"),this.updateWalletUI(o,"sanko-testnet"),this.emit("walletConnected",{address:o,network:"evm",walletType:"sanko-testnet"}),console.log(`EVM wallet connected successfully (Testnet): ${o}`),o}catch(t){throw console.error("Wallet connection failed:",t.message),this.emit("error",t),t}}setupEVMEventListeners(){this.evmProvider&&(this.evmProvider.on("accountsChanged",e=>{console.log("EVM accounts changed:",e),e.length===0?this.disconnectWallet():(this.address=e[0],localStorage.setItem("currentPlayer",this.address),this.updateWalletUI(this.address,"sanko-testnet"),this.emit("walletConnected",{address:this.address,network:"evm",walletType:"sanko-testnet"}))}),this.evmProvider.on("chainChanged",e=>{console.log("EVM chain changed:",e),e!==i?(this.disconnectWallet(),alert("Please switch to Sanko Testnet")):(this.address=localStorage.getItem("currentPlayer"),this.updateWalletUI(this.address,"sanko-testnet"),this.emit("walletConnected",{address:this.address,network:"evm",walletType:"sanko-testnet"}))}))}updateWalletUI(e,t){console.log("Updating wallet UI:",{walletAddress:e,walletType:t}),document.querySelectorAll(".wallet-btn").forEach(l=>l.style.cssText="display: none !important;");const o=document.getElementById("walletAddress");o?(o.style.cssText="display: block !important;",o.textContent=`Connected [DMT]: ${this.formatAddress(e)}`):console.warn("walletAddress element not found");const a=document.getElementById("difficulty-screen");a&&(a.style.cssText="display: flex !important;");const r=document.getElementById("status");r&&(r.textContent="Select difficulty to play")}disconnectWallet(){console.log("Disconnecting wallet..."),this.address=null,this.network=null,localStorage.removeItem("currentPlayer"),localStorage.removeItem("walletType"),localStorage.removeItem("chainType"),document.querySelectorAll(".wallet-btn").forEach(a=>a.style.cssText="display: block !important;");const t=document.getElementById("walletAddress");t&&(t.style.cssText="display: none !important;");const n=document.getElementById("difficulty-screen");n&&(n.style.cssText="display: none !important;");const o=document.getElementById("status");o&&(o.textContent="Connect to play"),this.emit("walletDisconnected",{}),console.log("Wallet disconnected successfully")}formatAddress(e){return e?`${e.slice(0,4)}...${e.slice(-4)}`:""}async reconnectWallet(){const e=localStorage.getItem("walletType"),t=localStorage.getItem("currentPlayer");if(!e||!t||e!=="sanko-testnet")return!1;console.log("Attempting to reconnect wallet:",{savedWalletType:e,savedAddress:t});try{if(!this.evmProvider)return!1;const n=await this.evmProvider.request({method:"eth_accounts"}),o=await this.evmProvider.request({method:"eth_chainId"});if(n.length>0&&n[0].toLowerCase()===t.toLowerCase()&&o===i)return this.address=n[0],this.network="evm",this.updateWalletUI(this.address,e),this.setupEVMEventListeners(),this.emit("walletConnected",{address:this.address,network:"evm",walletType:e}),!0}catch(n){console.error("Error reconnecting wallet:",n),this.disconnectWallet()}return!1}}let d=null;function v(){console.log("Starting wallet UI initialization...");function s(e=1){console.log(`Wallet initialization attempt ${e}, document.readyState:`,document.readyState);const t=document.querySelector(".wallet-connection");if(!t){if(e<10){setTimeout(()=>s(e+1),1e3);return}console.error("Failed to find wallet connection after 10 attempts");return}console.log("Found wallet connection div, creating buttons..."),d||(d=new E,window.walletConnector=d);const n=document.createElement("div");n.className="wallet-buttons",n.style.cssText=`
            display: flex !important;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-bottom: 15px;
            opacity: 1 !important;
            visibility: visible !important;
        `,[{name:"Sanko Testnet",type:"sanko-testnet",color:"#8BC34A"}].forEach(r=>{const l=document.createElement("button");l.className="wallet-btn",l.innerHTML=`Connect ${r.name}`,l.style.cssText=`
                display: block !important;
                padding: 10px 20px;
                margin: 5px;
                border-radius: 5px;
                cursor: pointer;
                font-family: Impact, sans-serif;
                border: none;
                color: white;
                min-width: 180px;
                background: linear-gradient(45deg, ${r.color}, ${b(r.color,20)});
                opacity: 1 !important;
                visibility: visible !important;
                z-index: 1000;
                position: relative;
            `,l.addEventListener("click",async u=>{u.preventDefault(),u.stopPropagation();try{await d.connectWallet(r.type)}catch(m){console.error(`Failed to connect ${r.name}:`,m)}}),n.appendChild(l),console.log(`Created button for ${r.name}`)});const a=document.createElement("div");a.id="walletAddress",a.className="wallet-address",a.style.cssText="display: none !important;",t.innerHTML="",t.style.cssText="display: block !important;",t.appendChild(n),t.appendChild(a),console.log("Wallet UI initialization complete"),d.reconnectWallet()}s()}window.updateGameResult=async function(s){let e=localStorage.getItem("currentPlayer")||s.player;if(!e){console.warn("No wallet address found for game result update");return}if(!c){console.error("LeaderboardManager instance not found for game result update");return}if(!window.gameDatabase){console.error("Supabase client (gameDatabase) not initialized");return}const{winner:t,mode:n,difficulty:o}=s;console.log("Game ended. Result:",{winner:t,player:e,mode:n,difficulty:o});let a;if(n==="ai")a=t==="blue"?"win":t==="red"?"loss":"draw";else if(n==="online")a=t;else{console.warn("Unknown game mode:",n);return}console.log(`Updating score for ${e}: ${a}, difficulty: ${o||"multiplayer"}`),await c.updateScore(e,a,o||"multiplayer"),console.log("Leaderboard update triggered successfully")};function h(){console.log("Initializing all components..."),window.leaderboardManager||(console.log("Creating new LeaderboardManager..."),window.leaderboardManager=new f),v();const s=document.createElement("style");s.textContent=`
        .wallet-connection { display: block !important; opacity: 1 !important; visibility: visible !important; }
        .wallet-buttons { display: flex !important; opacity: 1 !important; visibility: visible !important; }
        .wallet-btn { display: block !important; opacity: 1 !important; visibility: visible !important; }
    `,document.head.appendChild(s)}document.addEventListener("DOMContentLoaded",()=>{window.gameDatabase&&h()});(document.readyState==="complete"||document.readyState==="interactive")&&(console.log("Document already loaded, running initialization..."),window.gameDatabase&&h());
