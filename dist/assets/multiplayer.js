var x=Object.defineProperty;var A=(h,e,a)=>e in h?x(h,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):h[e]=a;var I=(h,e,a)=>A(h,typeof e!="symbol"?e+"":e,a);const r=window.ethers||null;r||console.error("Ethers.js not found on window. Please ensure it is loaded.");const k="0x3112AF5728520F52FD1C6710dD7bD52285a68e47";let B=!1,v=!1;class P{constructor(){var e;if(!window.gameDatabase)throw new Error("Game database not initialized");this.supabase=window.gameDatabase,this.gameId=null,this.playerColor=null,this.subscription=null,this.currentGameState=null,this.isMultiplayerMode=!0,this.isProcessingMove=!1,this.selectedPiece=null,this.chessContract=null,this.lastCreateClickTime=0,this.hasCreatedGame=!1,this.currentAddress=((e=localStorage.getItem("currentPlayer"))==null?void 0:e.toLowerCase())||null,this.isCheckingGameState=!1,this.isWaitingForOpponent=!1,this.activeGames=[],this.lobbySubscription=null,this.expiryInterval=null,this.lastCheckTime=0,this.lastQueriedGameId=null,this.web3=null,this.initWeb3=this.initWeb3.bind(this),this.connectToContract=this.connectToContract.bind(this),this.checkPlayerGameState=this.checkPlayerGameState.bind(this),this.joinGameByCode=this.joinGameByCode.bind(this),this.makeMove=this.makeMove.bind(this),this.showGame=this.showGame.bind(this),this.handleGameEnd=this.handleGameEnd.bind(this),this.initializeEventListeners=this.initializeEventListeners.bind(this),console.log("MultiplayerManager constructor called, currentAddress:",this.currentAddress),this.initializeEventListeners(),this.currentAddress&&(console.log("Triggering initial game state check"),this.initWeb3().then(()=>{this.checkPlayerGameState().catch(a=>console.error("Initial checkPlayerGameState failed:",a.message))}).catch(a=>console.error("Initial initWeb3 failed:",a.message)))}async checkPlayerGameState(e=5,a=1e3){if(console.log("checkPlayerGameState started, currentAddress:",this.currentAddress),!this.currentAddress)return console.error("No wallet connected in checkPlayerGameState"),window.updateStatusDisplay("Please connect your wallet"),!1;if(Date.now()-this.lastCheckTime<1e3)return console.log("checkPlayerGameState: Debounced"),!1;this.lastCheckTime=Date.now();let t=1;for(;t<=e;){console.log(`checkPlayerGameState attempt ${t} for ${this.currentAddress}`);try{let s;const n=await this.connectToContract();if(n){const c=await window.ethereum.request({method:"eth_chainId"});if(console.log("Current chainId:",c),c!=="0x7c8")return console.error("Wrong network, expected Sanko Testnet (0x7c8)"),window.updateStatusDisplay("Please switch to Sanko Testnet"),!1;const l=await n.playerToGame(this.currentAddress);console.log("Contract playerToGame result:",l),l!=="0x000000000000"&&l!==""&&(s=r.utils.hexlify(l).slice(2).toUpperCase(),console.log(`Contract gameId: ${s}`))}else console.warn("Contract not connected, falling back to Supabase");if(!s){console.log("Querying Supabase for active games");const{data:c,error:l}=await this.supabase.from("chess_games").select("game_id").eq("chain","sanko").eq("game_state","active").or(`blue_player_id.eq.${this.currentAddress},red_player_id.eq.${this.currentAddress}`);if(l)throw console.error("Supabase query error:",l.message),new Error(`Supabase error: ${l.message}`);if(!(c!=null&&c.length))return console.log("No active games found in Supabase"),this.resetGameState(),!1;s=c[0].game_id,console.log(`Supabase found game: ${s}`)}if(this.lastQueriedGameId===s)return console.log(`Game ${s} already queried`),!1;this.lastQueriedGameId=s,console.log(`Fetching game data for ${s}`);const{data:i,error:o}=await this.supabase.from("chess_games").select("game_id, blue_player_id, red_player_id, board, current_player, game_state, piece_state, last_move, bet_amount, is_public, game_title, chain, created_at").eq("game_id",s).eq("chain","sanko").or(`blue_player_id.eq.${this.currentAddress},red_player_id.eq.${this.currentAddress}`).single();if(o)throw console.error("Supabase game data query error:",o.message),new Error(`Supabase query error: ${o.message}`);return console.log("Game data retrieved:",i),i.game_state==="active"||i.game_state==="waiting"?(this.currentGameState=i,this.playerColor=this.currentAddress===i.blue_player_id?"blue":"red",console.log(`Loading game state for ${s}, playerColor: ${this.playerColor}`),window.loadGameState({board:i.board.positions,currentPlayer:i.current_player,pieceState:i.piece_state,lastMove:i.last_move,playerColor:this.playerColor}),window.updateStatusDisplay(this.isMyTurn()?"Your turn":"Opponent's turn"),await this.showGame(i),!0):(console.log(`Game ${s} is not active or waiting, resetting state`),this.resetGameState(),!1)}catch(s){console.error(`checkPlayerGameState attempt ${t} failed:`,s.message),t<e?(console.log(`Retrying in ${a*Math.pow(2,t-1)}ms`),await new Promise(n=>setTimeout(n,a*Math.pow(2,t-1)))):(console.error("Max retries reached in checkPlayerGameState"),window.updateStatusDisplay("Failed to load game. Please reconnect wallet."))}t++}return!1}async initWeb3(e=1,a=3){if(console.log(`initWeb3 attempt ${e}`),e>a)return console.error("Max wallet connection retries reached"),window.updateStatusDisplay("Max wallet connection retries reached"),null;if(!window.ethereum)return console.error("MetaMask not detected"),window.updateStatusDisplay("Please install MetaMask"),null;try{const t=new r.providers.Web3Provider(window.ethereum);await t.request({method:"eth_requestAccounts"});const s=t.getSigner();this.currentAddress=(await s.getAddress()).toLowerCase(),localStorage.setItem("currentPlayer",this.currentAddress),console.log("Wallet connected:",this.currentAddress);const{error:n}=await this.supabase.rpc("set_current_player",{player_address:this.currentAddress});if(n)throw console.error(`set_current_player failed: ${n.message}`),new Error(`set_current_player failed: ${n.message}`);return this.web3={provider:t,signer:s},console.log("Dispatching walletConnected event for:",this.currentAddress),window.dispatchEvent(new CustomEvent("walletConnected",{detail:this.currentAddress})),console.log("Web3 initialized:",this.currentAddress),this.web3}catch(t){return console.error(`initWeb3 attempt ${e} failed:`,t.message),window.updateStatusDisplay(`Wallet connection failed: ${t.message}`),e<a?await this.initWeb3(e+1,a):null}}async connectToContract(){if(this.chessContract)return console.log("Returning cached contract:",this.chessContract.address),this.chessContract;if(!this.web3||!this.web3.provider||!this.web3.signer){const e=await this.initWeb3();if(!e)return console.error("Failed to initialize Web3"),null;this.web3=e}try{const e=[{inputs:[{internalType:"address",name:"",type:"address"}],name:"playerToGame",outputs:[{internalType:"bytes6",name:"",type:"bytes6"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes6",name:"inviteCode",type:"bytes6"}],name:"createGame",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes6",name:"inviteCode",type:"bytes6"}],name:"joinGame",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes6",name:"inviteCode",type:"bytes6"},{internalType:"address",name:"winner",type:"address"}],name:"endGame",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes6",name:"inviteCode",type:"bytes6"}],name:"cancelGame",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"MIN_WAGER",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"MAX_WAGER",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes6",name:"inviteCode",type:"bytes6"},{indexed:!0,internalType:"address",name:"player1",type:"address"},{indexed:!1,internalType:"uint256",name:"wagerAmount",type:"uint256"}],name:"GameCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes6",name:"inviteCode",type:"bytes6"},{indexed:!0,internalType:"address",name:"player2",type:"address"}],name:"GameJoined",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes6",name:"inviteCode",type:"bytes6"},{indexed:!0,internalType:"address",name:"winner",type:"address"},{indexed:!1,internalType:"uint256",name:"houseFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"payoutOrRefund",type:"uint256"}],name:"GameEnded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes6",name:"inviteCode",type:"bytes6"},{indexed:!0,internalType:"address",name:"player1",type:"address"}],name:"GameCancelled",type:"event"}];this.chessContract=new r.Contract(k,e,this.web3.signer),console.log("Connected to contract:",k);const a=()=>{this.chessContract.on("GameCreated",(t,s,n)=>{const i=t.slice(2).toUpperCase();console.log(`GameCreated: ${i}, ${s}, ${r.utils.formatEther(n)} tDMT`),s.toLowerCase()===this.currentAddress&&(this.gameId=i,this.playerColor="blue",this.showGame({game_id:i,blue_player_id:s.toLowerCase(),red_player_id:null,game_state:"waiting",board:{positions:JSON.parse(JSON.stringify(window.initialBoard||[])),piece_state:window.pieceState||{}},current_player:"Blue",bet_amount:r.utils.formatEther(n)}))}),this.chessContract.on("GameJoined",(t,s)=>{var i,o;const n=t.slice(2).toUpperCase();console.log(`GameJoined: ${n}, ${s}`),this.gameId===n&&s.toLowerCase()===this.currentAddress&&(this.playerColor="red",this.showGame({game_id:n,blue_player_id:(i=this.currentGameState)==null?void 0:i.blue_player_id,red_player_id:s.toLowerCase(),game_state:"active",board:((o=this.currentGameState)==null?void 0:o.board)||{positions:JSON.parse(JSON.stringify(window.initialBoard||[])),piece_state:window.pieceState||{}},current_player:"Blue"}))}),this.chessContract.on("GameEnded",(t,s,n,i)=>{const o=t.slice(2).toUpperCase();console.log(`GameEnded: ${o}, ${s}, ${r.utils.formatEther(n)} tDMT, ${r.utils.formatEther(i)} tDMT`),this.gameId===o&&this.handleGameEnd({gameId:o,winner:s})}),this.chessContract.on("GameCancelled",(t,s)=>{const n=t.slice(2).toUpperCase();console.log(`GameCancelled: ${n}, ${s}`),this.gameId===n&&this.handleGameEnd({gameId:n,winner:r.constants.AddressZero})})};return this.chessContract.listenerCount("GameCreated")||a(),this.chessContract}catch(e){return console.error("connectToContract error:",e.message),null}}initializeEventListeners(){if(B){console.log("Event listeners already initialized, skipping");return}B=!0,console.log("Initializing event listeners"),window.addEventListener("walletConnected",async a=>{var s;const t=(s=a.detail)==null?void 0:s.toLowerCase();if(!t){console.error("walletConnected: No address provided");return}console.log(`walletConnected event received: ${t}`),this.currentAddress=t,localStorage.setItem("currentPlayer",t),this.isMultiplayerMode&&(console.log("Checking game state due to wallet connection"),await this.checkPlayerGameState().catch(n=>console.error("checkPlayerGameState failed:",n.message)))});const e={singlePlayerBtn:document.getElementById("ai-mode"),multiplayerBtn:document.getElementById("multiplayer-mode"),chessboard:document.getElementById("chessboard"),createGameBtn:document.getElementById("create-game"),joinGameBtn:document.getElementById("join-game"),leaveGameBtn:document.getElementById("leave-game"),cancelMatchmakingBtn:document.getElementById("cancel-match"),forceLeaveGameBtn:document.getElementById("force-leave-by"),resyncGameBtn:document.getElementById("resync-game"),resyncGameMenuBtn:document.getElementById("resync-game-menu")};console.log("DOM elements found:",Object.keys(e).filter(a=>e[a]).join(", ")),e.singlePlayerBtn&&e.singlePlayerBtn.addEventListener("click",()=>{console.log("Single-player mode selected"),this.isMultiplayerMode=!1,window.isMultiplayerMode=!1,this.leaveGame()}),e.multiplayerBtn&&e.multiplayerBtn.addEventListener("click",()=>{console.log("Multiplayer mode selected"),this.isMultiplayerMode=!0,window.isMultiplayerMode=!0;const a=document.querySelector(".multiplayer-menu"),t=document.getElementById("combat-screen");a&&t&&(a.style.display="flex",t.style.display="none"),this.initWeb3().then(()=>{console.log("initWeb3 completed, checking game state"),this.checkPlayerGameState().catch(s=>console.error("Multiplayer mode checkPlayerGameState failed:",s.message))}).catch(s=>console.error("initWeb3 failed:",s.message)),this.fetchMultiplayerGames()}),e.chessboard&&e.chessboard.addEventListener("click",a=>{console.log("Chessboard clicked"),this.handleMultiplayerClick(a)}),e.createGameBtn&&e.createGameBtn.addEventListener("click",async()=>{console.log("Create game button clicked");const a=document.getElementById("wagerAmount"),t=parseFloat((a==null?void 0:a.value)||.1),s=document.getElementById("game-title-input"),n=(s==null?void 0:s.value.trim())||"";if(isNaN(t)||t<=0){alert("Please enter a valid wager amount");return}await this.createMultiplayerGame(t,!0,n)}),e.joinGameBtn&&e.joinGameBtn.addEventListener("click",async()=>{console.log("Join game button clicked");const a=document.getElementById("game-code-input"),t=a==null?void 0:a.value.trim().toUpperCase();if(!t){alert("Please enter a game code");return}await this.joinGameByCode(t)}),e.leaveGameBtn&&e.leaveGameBtn.addEventListener("click",()=>{console.log("Leave game button clicked"),this.leaveGame()}),e.cancelMatchmakingBtn&&e.cancelMatchmakingBtn.addEventListener("click",()=>{console.log("Cancel matchmaking button clicked"),this.cancelMultiplayer()}),e.forceLeaveGameBtn&&e.forceLeaveGameBtn.addEventListener("click",async()=>{console.log("Force leave game button clicked"),await this.leaveGame(),alert("Attempted to leave game.")}),e.resyncGameBtn&&e.resyncGameBtn.addEventListener("click",()=>{console.log("Resync game button clicked"),this.forceMultiplayerSync()}),e.resyncGameMenuBtn&&e.resyncGameMenuBtn.addEventListener("click",()=>{console.log("Resync game menu button clicked"),this.forceMultiplayerSync()}),console.log("Event listeners initialized")}async updateMultiplayerMenu(e){console.log("updateMultiplayerMenu called with gameData:",e);const a=document.getElementById("active-game-info"),t=document.getElementById("active-game-id"),s=document.getElementById("multiplayer-options"),n=document.getElementById("resume-game-btn"),i=document.querySelector(".multiplayer-menu"),o=document.getElementById("chess-game"),c=document.getElementById("active-games-list"),l=document.getElementById("create-game"),d=document.getElementById("join-game"),u=document.getElementById("game-code-input"),g=document.getElementById("wagerAmount");e&&a&&t&&s&&n?(console.log("Showing active game info for:",e.game_id),a.style.display="block",t.textContent=e.game_id,s.style.display="none",n.onclick=()=>this.showGame(e),c&&(c.style.display="none")):(console.log("Showing multiplayer menu, no active game"),a&&(a.style.display="none"),s&&(s.style.display="block"),i&&o&&(i.style.display="flex",o.style.display="none"),c&&(c.style.display=this.isWaitingForOpponent?"none":"block"),l&&(l.disabled=this.isWaitingForOpponent),d&&(d.disabled=this.isWaitingForOpponent),u&&(u.disabled=this.isWaitingForOpponent),g&&(g.disabled=this.isWaitingForOpponent))}async fetchMultiplayerGames(){console.log("fetchMultiplayerGames called");try{const{error:e}=await this.supabase.rpc("set_current_player",{player_address:this.currentAddress});if(e)throw console.error(`set_current_player failed: ${e.message}`),new Error(`set_current_player failed: ${e.message}`);const{data:a,error:t}=await this.supabase.from("chess_games").select("game_id, blue_player_id, red_player_id, bet_amount, game_title, created_at, game_state").in("game_state",["waiting","active"]).eq("chain","sanko").or(`blue_player_id.eq.${this.currentAddress},red_player_id.eq.${this.currentAddress},and(game_state.eq.waiting,red_player_id.is.null,is_public.eq.true)`).order("created_at",{ascending:!1});if(t)throw console.error(`Supabase fetch error: ${t.message}`),new Error(`Supabase error: ${t.message}`);this.activeGames=(a||[]).filter(s=>s.blue_player_id!==this.currentAddress||s.game_state==="active"||s.red_player_id===null),console.log(`Fetched ${this.activeGames.length} games`),this.renderMultiplayerGames()}catch(e){console.error("Failed to fetch games:",e.message);const a=document.getElementById("games-container");a&&(a.innerHTML='<p style="color: white; font-family: monospace; text-align: center;">Error loading games</p>')}}renderMultiplayerGames(){console.log("renderMultiplayerGames called");const e=document.getElementById("games-container"),a=document.getElementById("active-games-list");if(!e||!a){console.error("Missing games-container or active-games-list elements");return}if(e.innerHTML="",a.style.display="block",!this.activeGames.length){e.innerHTML='<p style="color: white; font-family: monospace; text-align: center;">No games available.</p>';return}this.activeGames.forEach(t=>{const s=document.createElement("div");s.className="game-item";const n=`${t.blue_player_id.slice(0,6)}...${t.blue_player_id.slice(-4)}`;s.innerHTML=`
                <span>Game: ${t.game_id} | Player: ${n} | ${t.bet_amount} tDMT | ${t.game_title||"No Title"}</span>
                <button class="join-game-btn" data-game-id="${t.game_id}" ${this.currentAddress&&t.blue_player_id===this.currentAddress&&t.game_state!=="active"?"disabled":""}>Join</button>
            `,e.appendChild(s)}),document.querySelectorAll(".join-game-btn").forEach(t=>{t.addEventListener("click",async()=>{const s=t.dataset.gameId,n=document.getElementById("game-code-input");n&&(n.value=s),await this.joinGameByCode(s)})})}setupRealtimeSubscription(){console.log("setupRealtimeSubscription called"),this.lobbySubscription&&this.supabase.removeChannel(this.lobbySubscription),this.lobbySubscription=this.supabase.channel("chess_games_changes").on("postgres_changes",{event:"*",schema:"public",table:"chess_games",filter:"game_state=eq.waiting,chain=eq.sanko"},()=>this.fetchMultiplayerGames()).subscribe()}startGameExpiryCheck(){console.log("startGameExpiryCheck called"),this.expiryInterval&&clearInterval(this.expiryInterval),this.expiryInterval=setInterval(async()=>{try{const e=new Date(Date.now()-18e5).toISOString(),{data:a,error:t}=await this.supabase.from("chess_games").select("game_id, blue_player_id").eq("game_state","waiting").is("red_player_id",null).lte("created_at",e).eq("chain","sanko");if(t)throw console.error("Supabase expiry query error:",t.message),t;for(const s of a){const n=await this.connectToContract();if(n){const i=r.utils.hexZeroPad(r.utils.hexlify("0x"+s.game_id.toLowerCase()),6);await n.cancelGame(i),await this.supabase.from("chess_games").update({game_state:"cancelled",updated_at:new Date().toISOString()}).eq("game_id",s.game_id)}}await this.fetchMultiplayerGames()}catch(e){console.error("Error checking game expiry:",e.message)}},60*1e3)}async createMultiplayerGame(e=.1,a=!0,t=""){if(console.log("createMultiplayerGame called, wagerAmount:",e,"isPublic:",a,"gameTitle:",t),this.hasCreatedGame){console.log("Game creation blocked: already created");return}this.hasCreatedGame=!0;const s=document.getElementById("create-game");s&&(s.disabled=!0);let n;try{if(!this.currentAddress)throw new Error("Wallet not connected");if(!this.supabase)throw new Error("Supabase not initialized");if(await window.ethereum.request({method:"eth_chainId"})!=="0x7c8")try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x7c8"}]})}catch(y){if(y.code===4902)await window.ethereum.request({method:"wallet_addEthereumChain",params:[{chainId:"0x7c8",chainName:"Sanko Testnet",rpcUrls:["https://sanko-arb-sepolia.rpc.caldera.xyz/http"],nativeCurrency:{name:"tDMT",symbol:"tDMT",decimals:18},blockExplorerUrls:["https://explorer.testnet.sanko.xyz"]}]});else throw new Error("Please switch to Sanko Testnet")}const o=await this.connectToContract();if(!o)throw new Error("Failed to connect to contract");const c=r.utils.formatEther(await o.MIN_WAGER()),l=r.utils.formatEther(await o.MAX_WAGER());if(e<c||e>l)throw new Error(`Wager must be between ${c} and ${l} tDMT`);let d=await o.playerToGame(this.currentAddress);if(d!=="0x000000000000"&&d!==""){const y=r.utils.hexlify(d).slice(2).toUpperCase();if(await this.leaveGame(),d=await o.playerToGame(this.currentAddress),d!=="0x000000000000"&&d!==""){const $=r.utils.hexZeroPad(r.utils.hexlify("0x"+y.toLowerCase()),6);await o.cancelGame($),await this.cleanupStaleGame(y)}}n=await this.generateUniqueInviteCode();const u=r.utils.hexZeroPad(r.utils.hexlify("0x"+n.toLowerCase()),6),g=r.utils.parseEther(e.toString()),{data:p}=await this.supabase.from("chess_games").select("game_id").eq("game_id",n).eq("game_state","waiting");if(p!=null&&p.length)throw new Error("Invite code already exists");const{data:w,error:f}=await this.supabase.from("chess_games").insert({game_id:n,blue_player_id:this.currentAddress,red_player_id:null,board:{positions:JSON.parse(JSON.stringify(window.initialBoard||[])),piece_state:window.pieceState||{}},current_player:"Blue",game_state:"waiting",bet_amount:e,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),is_public:a,game_title:t||null,chain:"sanko",contract_address:o.address}).select().single();if(f)throw console.error("Supabase insert error:",f.message),new Error(`Supabase insert failed: ${f.message}`);await o.createGame(u,{value:g}),this.gameId=n,this.playerColor="blue",this.currentGameState=w,this.isWaitingForOpponent=!0;const _=document.getElementById("gameCode"),b=document.getElementById("gameCodeDisplay"),m=document.getElementById("matchmaking-status"),G=document.getElementById("cancel-match"),S=document.getElementById("create-game"),M=document.getElementById("join-game"),C=document.getElementById("leave-game"),E=document.getElementById("force-leave-by");if(_&&(_.textContent=n),b&&(b.style.display="block"),m){m.style.display="block";const y=m.querySelector(".status-text");y&&(y.textContent="Waiting for opponent...")}return G&&(G.style.display="block"),S&&(S.style.display="none"),M&&(M.style.display="none"),C&&(C.style.display="block"),E&&(E.style.display="block"),await this.subscribeToGame(),await this.updateMultiplayerMenu(w),await this.fetchMultiplayerGames(),alert(`Game created with wager ${e} tDMT`),n}catch(i){if(console.error("Create game failed:",i.message),this.hasCreatedGame=!1,this.isWaitingForOpponent=!1,n){await this.cleanupStaleGame(n);const o=await this.connectToContract();if(o){const c=r.utils.hexZeroPad(r.utils.hexlify("0x"+n.toLowerCase()),6);await o.cancelGame(c).catch(()=>{})}}return alert(`Failed to create game: ${i.message}`),!1}finally{s&&(s.disabled=!1)}}async generateUniqueInviteCode(){const e=("10000000-1000-4000-8000"+-1e11).replace(/[018]/g,t=>(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)).slice(0,6).toUpperCase(),{data:a}=await this.supabase.from("chess_games").select("game_id").eq("game_id",e).single();return a?this.generateUniqueInviteCode():e}async cleanupStaleGame(e){console.log("cleanupStaleGame called for:",e);try{await this.supabase.from("chess_games").delete().eq("game_id",e).eq("game_state","waiting"),console.log(`Deleted stale game ${e}`)}catch(a){console.error(`Failed to delete stale game ${e}:`,a.message)}}async joinGameByCode(e,a=3,t=2e3){console.log("joinGameByCode called for gameId:",e);let s=1;for(;s<=a;){console.log(`Joining game ${e}, attempt ${s}`);try{if(!this.currentAddress)throw new Error("Wallet not connected");const n=await this.connectToContract();if(!n)throw new Error("Failed to connect to contract");const i=await this.supabase.from("chess_games").select("bet_amount").eq("game_id",e).single();if(i.error)throw console.error("Supabase game fetch error:",i.error.message),new Error(`Failed to fetch game: ${i.error.message}`);const o=r.utils.parseEther(i.data.bet_amount.toString()),c=r.utils.hexZeroPad(r.utils.hexlify("0x"+e.toLowerCase()),6);return await n.joinGame(c,{value:o}),console.log(`Joined game ${e}`),await this.checkPlayerGameState(),!0}catch(n){if(console.error(`Join attempt ${s} failed:`,n.message),s===a)return window.updateStatusDisplay(`Failed to join game: ${n.message}`),!1;await new Promise(i=>setTimeout(i,t))}s++}return!1}async cancelMultiplayer(){if(console.log("cancelMultiplayer called"),!this.isWaitingForOpponent){console.log("No matchmaking to cancel");return}try{const e=await this.connectToContract();if(!e)throw new Error("Failed to connect to contract");const{data:a,error:t}=await this.supabase.from("chess_games").select("game_id").eq("blue_player_id",this.currentAddress).eq("game_state","waiting").is("red_player_id",null).eq("chain","sanko").single();if(t||!a)throw console.error("No waiting game found:",t==null?void 0:t.message),new Error("No waiting game found");const s=r.utils.hexZeroPad(r.utils.hexlify("0x"+a.game_id.toLowerCase()),6);await e.cancelGame(s),await this.supabase.from("chess_games").update({game_state:"cancelled",updated_at:new Date().toISOString()}).eq("game_id",a.game_id),this.isWaitingForOpponent=!1,this.hasCreatedGame=!1,await this.updateMultiplayerMenu(null),alert("Matchmaking cancelled")}catch(e){console.error("Cancel matchmaking error:",e.message),alert(`Error cancelling: ${e.message}`)}}async endGame(e,a){console.log("endGame called for inviteCode:",e,"winnerAddress:",a);try{const t=await this.connectToContract();if(!t)throw new Error("Failed to connect to contract");const s=r.utils.hexZeroPad(r.utils.hexlify("0x"+e.toLowerCase()),6);await t.endGame(s,a),await this.supabase.from("chess_games").update({game_state:"completed",winner:a===this.currentGameState.blue_player_id?"blue":a===this.currentGameState.red_player_id?"red":"draw",updated_at:new Date().toISOString()}).eq("game_id",e),this.handleGameEnd({game_id:e,winner:a})}catch(t){console.error(`End game ${e} error:`,t.message),alert(`Failed to end game: ${t.message}`)}}async leaveGame(){console.log("leaveGame called"),this.subscription&&(this.supabase.removeChannel(this.subscription),this.subscription=null);try{const e=await this.connectToContract();if(!e)throw new Error("Failed to connect to contract");const a=await e.playerToGame(this.currentAddress);if(a!=="0x000000000000"&&a!==""){const t=r.utils.hexlify(a).slice(2).toUpperCase(),s=r.utils.hexZeroPad(r.utils.hexlify("0x"+t.toLowerCase()),6);if((await e.games(s)).player2===r.constants.AddressZero)await e.cancelGame(s),await this.cleanupStaleGame(t);else throw new Error("Cannot leave active game with two players")}this.gameId&&await this.supabase.from("chess_games").update({game_state:"cancelled",winner:null,updated_at:new Date().toISOString()}).eq("game_id",this.gameId),this.resetGameState(),await this.updateMultiplayerMenu(null)}catch(e){console.error("Leave game error:",e.message),alert(`Error leaving game: ${e.message}`),this.resetGameState(),await this.updateMultiplayerMenu(null)}}async debugLeaveGame(){console.log("debugLeaveGame called");try{const e=await this.connectToContract();if(!e)throw new Error("Failed to connect to contract");const a=await e.playerToGame(this.currentAddress);if(a==="0x000000000000"||a===""){console.log("No game to leave");return}const t=r.utils.hexlify(a).slice(2).toUpperCase(),{data:s,error:n}=await this.supabase.from("chess_games").select("game_state, blue_player_id, red_player_id").eq("game_id",t).single();if(n||!s)throw console.error("Game not found:",n==null?void 0:n.message),new Error("Game not found");if(s.game_state==="active"&&s.blue_player_id&&s.red_player_id){alert("Cannot leave active game with two players");return}const i=r.utils.hexZeroPad(r.utils.hexlify("0x"+t.toLowerCase()),6);await e.cancelGame(i),await this.supabase.from("chess_games").update({game_state:"cancelled",updated_at:new Date().toISOString()}).eq("game_id",t),this.subscription&&(this.supabase.removeChannel(this.subscription),this.subscription=null),this.resetGameState(),await this.updateMultiplayerMenu(null)}catch(e){console.error("Debug leave failed:",e.message),alert(`Failed to leave: ${e.message}`)}}async debugEndGame(e){console.log("debugEndGame called for winnerAddress:",e);try{const a=await this.connectToContract();if(!a)throw new Error("Failed to connect to contract");const t=await a.playerToGame(this.currentAddress);if(t==="0x000000000000"||t===""){console.log("No game to end");return}const s=r.utils.hexlify(t).slice(2).toUpperCase(),n=r.utils.hexZeroPad(r.utils.hexlify("0x"+s.toLowerCase()),6);await a.endGame(n,e),await this.supabase.from("chess_games").update({game_state:"completed",winner:e===this.currentAddress?"blue":"red",updated_at:new Date().toISOString()}).eq("game_id",s)}catch(a){console.error("Debug endGame failed:",a.message),alert(`Failed to end game: ${a.message}`)}}resetGameState(){var s,n;if(console.log("resetGameState called"),((s=this.currentGameState)==null?void 0:s.game_state)==="active"||((n=this.currentGameState)==null?void 0:n.game_state)==="waiting"){console.warn("resetGameState: Skipping for active/waiting game");return}this.gameId=null,this.playerColor=null,this.currentGameState=null,this.selectedPiece=null,this.hasCreatedGame=!1,this.lastCreateClickTime=0,this.isWaitingForOpponent=!1;const e=document.querySelector(".multiplayer-menu"),a=document.getElementById("chess-game"),t=document.getElementById("combat-screen");e&&(e.style.display="block"),a&&(a.style.display="none"),t&&(t.style.display="none"),window.updateGameResult&&window.updateGameResult({winner:"loss",player:this.currentAddress,mode:"online"}),window.leaderboardManager&&window.leaderboardManager.loadLeaderboard()}isMyTurn(){var a,t,s,n;const e=((t=(a=this.currentGameState)==null?void 0:a.current_player)==null?void 0:t.toLowerCase())===((s=this.playerColor)==null?void 0:s.toLowerCase());return console.log("isMyTurn:",e,"current_player:",(n=this.currentGameState)==null?void 0:n.current_player,"playerColor:",this.playerColor),e}async showGame(e){if(console.log("showGame called with gameData:",e),!(e!=null&&e.game_id)){console.error("showGame: Invalid game ID",e),window.updateStatusDisplay("Failed to load game");return}console.log(`showGame: Loading ${e.game_id}`);const a=e.board.positions,t=e.piece_state||e.board.piece_state||{redKingMoved:!1,redRooksMove:{left:!1,right:!1},blueKingMoved:!1,blueRooksMove:{left:!1,right:!1},lastPawnDoubleMove:null},s=e.current_player;try{const n=document.getElementById("chess-game"),i=document.querySelector(".multiplayer-menu");if(console.log("chess-game element:",!!n,"multiplayer-menu element:",!!i),n&&i)console.log("Showing chess game, hiding multiplayer menu"),n.style.display="block",i.style.display="none";else{console.error("Missing DOM elements: chess-game or multiplayer-menu"),window.updateStatusDisplay("UI error: Game board not found");return}window.board=a,window.pieceState=t,window.currentPlayer=s,console.log("Calling placePieces"),window.placePieces(),console.log("Updating move log with:",e.last_move),window.updateMoveLog(e.last_move);const o=this.isMyTurn()?"Your turn":"Opponent's turn";console.log("Updating status display:",o),window.updateStatusDisplay(o),this.gameId=e.game_id,this.currentGameState={...e,board:{positions:a,piece_state:t},current_player:s},console.log("Updating board interactivity"),this.updateBoardInteractivity(),console.log("Subscribing to game:",e.game_id),await this.subscribeToGame(e.game_id)}catch(n){console.error("showGame error:",n.message),window.updateStatusDisplay("Error loading game")}}updateBoardInteractivity(){console.log("updateBoardInteractivity called");const e=document.getElementById("chessboard");if(!e){console.error("Chessboard element not found");return}const a=this.isMyTurn();e.style.pointerEvents=a?"auto":"none";const t=e.getElementsByClassName("piece");Array.from(t).forEach(s=>{const n=parseInt(s.getAttribute("data-row")),i=parseInt(s.getAttribute("data-col")),o=window.board[n][i];if(o){const c=window.getPieceColor(o);s.style.cursor=a&&c===this.playerColor?"pointer":"default"}})}async subscribeToGame(e=this.gameId){if(console.log("subscribeToGame called for gameId:",e),!e){console.error("Invalid game ID for subscription"),window.updateStatusDisplay("Failed to connect to game");return}this.subscription&&(this.supabase.removeChannel(this.subscription),this.subscription=null);const a=`game_${e}`;let t=null;this.subscription=this.supabase.channel(a).on("postgres_changes",{event:"UPDATE",schema:"public",table:"chess_games",filter:`game_id=eq.${e}`},s=>{console.log("Received game update:",s),s.new&&this.handleUpdate(s.new)}).subscribe(s=>{console.log("Subscription status:",s),s==="SUBSCRIBED"?t=setInterval(()=>{this.supabase.channel(a).send({type:"broadcast",event:"heartbeat",payload:{ping:Date.now()}})},3e4):(s==="CHANNEL_ERROR"||s==="CLOSED")&&(clearInterval(t),this.subscribeToGame(e))})}async handleUpdate(e){var a;if(console.log("handleUpdate called with game:",e),!!e)try{if(this.currentGameState=e,(a=e.board)!=null&&a.positions&&(window.board=JSON.parse(JSON.stringify(e.board.positions)),window.pieceState=e.piece_state||window.pieceState,window.placePieces()),e.last_move&&window.updateMoveLog(e.last_move),e.current_player){window.currentPlayer=e.current_player,this.updateBoardInteractivity();const t=this.isMyTurn()?"Your turn":"Waiting for opponent";window.isKingInCheck&&window.isKingInCheck(e.current_player)?window.updateStatusDisplay(`Check: ${t}`):e.game_state!=="completed"&&window.updateStatusDisplay(t)}e.game_state==="completed"&&await this.handleGameEnd(e),e.game_state==="active"&&this.isWaitingForOpponent&&(this.isWaitingForOpponent=!1,await this.showGame(e),await this.updateMultiplayerMenu(e))}catch(t){console.error("handleUpdate error:",t.message),window.updateStatusDisplay("Error syncing game")}}async handleGameEnd(e){console.log("handleGameEnd called with game:",e);try{let a,t;if(!e.winner||e.winner==="draw"?(a="draw",t="Game Over - Draw!"):e.winner===r.constants.AddressZero?(a="loss",t="Game Cancelled!"):(a=e.winner===(this.playerColor==="blue"?this.currentGameState.blue_player_id:this.currentGameState.red_player_id)?"win":"loss",t=`Game Over - ${e.winner===this.currentGameState.blue_player_id?"Blue":"Red"} wins!`),e.bet_amount){const i=r.utils.parseEther(e.bet_amount.toString()).mul(2),o=i.mul(5).div(100),c=i.sub(o),l=r.utils.formatEther(c),d=r.utils.formatEther(o);if(e.winner==="draw"||!e.winner){const u=r.utils.formatEther(c.div(2));t+=`
Each player refunded: ${u} tDMT (after 5% fee of ${d} tDMT)`}else e.winner!==r.constants.AddressZero&&(t+=`
Winner payout: ${l} tDMT (after 5% fee of ${d} tDMT)`)}window.updateStatusDisplay(t),window.updateGameResult&&window.updateGameResult({winner:کروناresult,player:this.currentAddress,mode:"online"}),window.leaderboardManager&&await window.leaderboardManager.loadLeaderboard();const s=document.getElementById("chessboard");s&&(s.style.pointerEvents="none"),await this.updateMultiplayerMenu(null)}catch(a){console.error("handleGameEnd error:",a.message),window.updateStatusDisplay("Error processing game end")}}handleMultiplayerClick(e){if(console.log("handleMultiplayerClick called"),!this.isMultiplayerMode||this.isProcessingMove)return console.log("Click ignored: not in multiplayer mode or processing move"),!1;if(!this.isMyTurn())return window.updateStatusDisplay("Waiting for opponent"),!0;const a=e.target.closest(".piece"),t=e.target.closest(".highlight");if(a){const s=parseInt(a.getAttribute("data-row")),n=parseInt(a.getAttribute("data-col"));this.handlePieceClick(s,n,a)}else if(t&&this.selectedPiece){const s=parseInt(t.getAttribute("data-row")),n=parseInt(t.getAttribute("data-col"));this.handleSquareClick(s,n)}}handlePieceClick(e,a,t){var n,i,o;if(console.log("handlePieceClick called at row:",e,"col:",a),!this.isMultiplayerMode||!this.isMyTurn()){console.log("Piece click ignored: not multiplayer or not my turn");return}const s=window.board[e][a];if(!s||window.getPieceColor(s)!==this.playerColor){console.log("Invalid piece or wrong color");return}if(this.selectedPiece&&(this.selectedPiece.element.style.opacity="1",window.removeHighlights&&window.removeHighlights()),((n=this.selectedPiece)==null?void 0:n.row)===e&&((i=this.selectedPiece)==null?void 0:i.col)===a){this.selectedPiece=null;return}this.selectedPiece={row:e,col:a,element:t},t.style.opacity="0.7",(o=window.showLegalMoves)==null||o.call(window,e,a)}handleSquareClick(e,a){if(console.log("handleSquareClick called at row:",e,"col:",a),!this.selectedPiece||!this.isMyTurn()){console.log("Square click ignored: no selected piece or not my turn");return}const t=this.selectedPiece.row,s=this.selectedPiece.col,n=window.board[t][s];this.isPawnPromotion(n,e)?window.promptPawnPromotion(t,s,e,a):this.makeMove(t,s,e,a),this.selectedPiece.element.style.opacity="1",this.selectedPiece=null,window.removeHighlights&&window.removeHighlights()}isPawnPromotion(e,a){const t=e.toLowerCase()==="p"&&(this.playerColor==="blue"&&a===0||this.playerColor==="red"&&a===7);return console.log("isPawnPromotion:",t,"piece:",e,"targetRow:",a),t}async handleMove({startRow:e,startCol:a,endRow:t,endCol:s,promotionPiece:n}){return console.log("handleMove called with:",{startRow:e,startCol:a,endRow:t,endCol:s,promotionPiece:n}),await this.makeMove(e,a,t,s,n)}async makeMove(e,a,t,s,n){var i,o,c;if(console.log(`makeMove: [${e},${a}] to [${t},${s}]`),this.isProcessingMove)return console.log("Move blocked: already processing"),!1;this.isProcessingMove=!0;try{if(!this.currentAddress)throw new Error("No wallet connected");if(!this.gameId||!this.currentGameState)throw new Error("No active game");if(((i=this.currentGameState.current_player)==null?void 0:i.toLowerCase())!==this.playerColor)throw new Error("Not your turn");if(e<0||e>7||a<0||a>7||t<0||t>7||s<0||s>7)throw new Error("Invalid coordinates");const l=window.board[e][a];if(!l||window.getPieceColor(l)!==this.playerColor)throw new Error("Invalid piece");if(!window.canPieceMove(l,a,e,t,s,!0,this.playerColor))throw new Error("Illegal move");const d=JSON.parse(JSON.stringify(window.board)),u=JSON.parse(JSON.stringify(window.pieceState||{redKingMoved:!1,redRooksMove:{left:!1,right:!1},blueKingMoved:!1,blueRooksMove:{left:!1,right:!1},lastPawnDoubleMove:null})),g=d[t][s];if(d[t][s]=n||l,d[e][a]=null,l.toLowerCase()==="k"&&(u[this.playerColor+"KingMoved"]=!0),l.toLowerCase()==="r"&&(a===0&&(u[this.playerColor+"RooksMove"].left=!0),a===7&&(u[this.playerColor+"RooksMove"].right=!0)),l.toLowerCase()==="p"&&Math.abs(e-t)===2?u.lastPawnDoubleMove={row:t,col:s}:u.lastPawnDoubleMove=null,l.toLowerCase()==="k"&&Math.abs(s-a)===2){const m=this.playerColor==="blue"?7:0;s===6?(d[m][5]=d[m][7],d[m][7]=null):s===2&&(d[m][3]=d[m][0],d[m][0]=null)}if(l.toLowerCase()==="p"&&s!==a&&!g&&((o=u.lastPawnDoubleMove)==null?void 0:o.row)===t&&((c=u.lastPawnDoubleMove)==null?void 0:c.col)===s){const m=this.playerColor==="blue"?1:-1;d[t+m][s]=null}const p=this.playerColor==="blue"?"red":"blue",w={piece:l,from_row:e,from_col:a,end_row:t,end_col:s,promotion:n,captured_piece:g},{error:f}=await this.supabase.rpc("set_current_player",{player_address:this.currentAddress});if(f)throw new Error(`set_current_player failed: ${f.message}`);const{data:_,error:b}=await this.supabase.from("chess_games").update({board:{positions:d,piece_state:u},current_player:p,last_move:w,updated_at:new Date().toISOString()}).eq("game_id",this.gameId).select("current_player");if(b)throw new Error(`Supabase update failed: ${b.message}`);if(window.board=d,window.pieceState=u,window.currentPlayer=p,window.placePieces(),this.currentGameState={...this.currentGameState,board:{positions:d,piece_state:u},current_player:p,last_move:w},this.updateBoardInteractivity(),window.updateMoveLog(w),window.isCheckmate&&window.isCheckmate(p)){const m=this.playerColor==="blue"?this.currentGameState.blue_player_id:this.currentGameState.red_player_id;await this.endGame(this.gameId,m)}else window.isStalemate&&window.isStalemate(p)?await this.endGame(this.gameId,r.constants.AddressZero):window.isKingInCheck&&window.isKingInCheck(p)?window.updateStatusDisplay(`Check: ${this.isMyTurn()?"Your turn":"Opponent"}`):window.updateStatusDisplay(this.isMyTurn()?"Your turn":"Opponent");return!0}catch(l){return console.error(`makeMove error for ${this.gameId}:`,l.message),window.updateStatusDisplay(`Move failed: ${l.message}`),!1}finally{this.isProcessingMove=!1}}async forceMultiplayerSync(){console.log("forceMultiplayerSync called");try{this.currentAddress||(console.log("No wallet connected, attempting to initialize"),await this.initWeb3()),this.currentAddress?(console.log("Attempting to resync game state"),await this.checkPlayerGameState()):(console.error("Failed to connect wallet for resync"),window.updateStatusDisplay("Please connect wallet to resync"))}catch(e){console.error("forceMultiplayerSync failed:",e.message),window.updateStatusDisplay("Resync failed: "+e.message)}}}I(P,"hasGameBeenCreated",!1);function T(){if(console.log("initializeMultiplayerManager called"),v){console.log("Multiplayer initialization already in progress");return}v=!0;const h=()=>{if(console.log("initManager called, gameDatabase:",!!window.gameDatabase),!window.gameDatabase){console.log("Waiting for supabaseReadyEvent"),document.addEventListener("supabaseReadyEvent",h,{once:!0});return}window.multiplayerManager||(console.log("Creating new MultiplayerManager"),window.multiplayerManager=new P,window.multiplayerManager.setupRealtimeSubscription(),window.multiplayerManager.startGameExpiryCheck(),window.multiplayerManager&&localStorage.getItem("currentPlayer")&&(console.log("Checking player game state on startup"),window.multiplayerManager.checkPlayerGameState())),v=!1,console.log("MultiplayerManager initialization complete")};document.readyState==="complete"||document.readyState==="interactive"?(console.log("Document ready, initializing manager"),h()):(console.log("Document not ready, waiting for DOMContentLoaded"),document.addEventListener("DOMContentLoaded",h,{once:!0}))}window.initializeMultiplayerGame=T;T();document.addEventListener("DOMContentLoaded",()=>{console.log("DOMContentLoaded, checking supabase"),window.gameDatabase&&(console.log("Supabase ready, dispatching supabaseReady"),document.dispatchEvent(new CustomEvent("supabaseReady")))},{once:!0});
