const p={AI:"ai",ONLINE:"online"};let X=!1,d=p.AI;const g=8,G=[["R","N","B","Q","K","B","N","R"],["P","P","P","P","P","P","P","P"],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],["p","p","p","p","p","p","p","p"],["r","n","b","q","k","b","n","r"]];let f=null,P=[],v="active",b=null,N=null,h="easy";window.initialBoard=G;window.board=JSON.parse(JSON.stringify(G));window.currentPlayer="blue";window.isMultiplayerMode=!1;window.playerColor="blue";const y={blueKingMoved:!1,redKingMoved:!1,blueRooksMove:{left:!1,right:!1},redRooksMove:{left:!1,right:!1},lastPawnDoubleMove:null},B={R:"images/redrook.png",N:"images/redknight.png",B:"images/redbishop.png",Q:"images/redqueen.png",K:"images/redking.png",P:"images/redpawn.png",r:"images/bluerook.png",n:"images/blueknight.png",b:"images/bluebishop.png",q:"images/bluequeen.png",k:"images/blueking.png",p:"images/bluepawn.png"};window.pieceImages=B;let Y=[],D=null;function r(e){console.log(e),Y.push(e),D||(D=setTimeout(()=>{Y=[],D=null},100))}function m(e){if(e==="It's-not-your-turn!"&&d==="ai"){r(`updateStatusDisplay: Blocking 'It's-not-your-turn!' in AI mode, currentGameMode=${d}`);return}r(`updateStatusDisplay: Setting status to '${e}'`);const t=document.getElementById("status");t&&(t.textContent=e)}function O(e){const t=document.getElementById("easy-mode"),i=document.getElementById("hard-mode"),n=document.getElementById("start-game");t&&i&&n?(e==="easy"?(t.classList.add("selected"),i.classList.remove("selected")):e==="hard"?(i.classList.add("selected"),t.classList.remove("selected")):(t.classList.remove("selected"),i.classList.remove("selected")),n.disabled=!e):r("Difficulty buttons not found")}function Z(){return!!localStorage.getItem("currentPlayer")}function V(){return Z()?!0:(m("Connect to play"),!1)}window.debug=r;window.updateStatusDisplay=m;window.updateDifficultyButtons=O;function M(e){return e?e===e.toUpperCase()?"red":"blue":null}function R(e){return{p:"pawn",r:"rook",n:"knight",b:"bishop",q:"queen",k:"king"}[e.toLowerCase()]}function H(e,t){return e>=0&&e<g&&t>=0&&t<g}function K(e,t){return`${String.fromCharCode(97+t)}${8-e}`}function ge(){const e=document.getElementById("chessboard");if(!e){r("Chessboard element not found");return}const t=new Map;e.querySelectorAll(".piece").forEach(i=>{const n=parseInt(i.getAttribute("data-row")),o=parseInt(i.getAttribute("data-col"));t.set(`${n},${o}`,i)});for(let i=0;i<g;i++)for(let n=0;n<g;n++){const o=window.board[i][n],a=`${i},${n}`,l=t.get(a);if(o&&!l){const s=ee(o,i,n);e.appendChild(s)}else!o&&l?l.remove():o&&l&&l.style.backgroundImage!==`url("${B[o]}")`&&(l.style.backgroundImage=`url("${B[o]}")`)}r("Pieces updated successfully")}function ee(e,t,i){const n=document.createElement("div");n.className="piece";const o=B[e]||"images/default-piece.png";return n.style.backgroundImage=`url('${o}')`,n.style.left=`${i*12.5}%`,n.style.top=`${t*12.5}%`,n.setAttribute("data-row",t),n.setAttribute("data-col",i),n.addEventListener("click",de),r(`Created piece ${e} at [${t},${i}] with image ${o}`),n}function U(){const e=document.getElementById("chessboard");if(!e){r("Chessboard element not found");return}const t=te();e.style.backgroundImage=`url('${t}')`,r(`Selected board: ${t}`)}function te(){return`images/chessboard${Math.floor(Math.random()*6)+1}.png`}function z(e,t,i=!1){const n=document.createElement("div");n.className="highlight"+(i?" capture":""),n.style.left=`${t*12.5}%`,n.style.top=`${e*12.5}%`,n.setAttribute("data-row",e),n.setAttribute("data-col",t),n.addEventListener("click",()=>we(e,t)),document.getElementById("chessboard").appendChild(n)}window.getLegalMoves=function(e,t){const i=window.board[e][t];if(!i)return[];M(i);const n=[];for(let o=0;o<g;o++)for(let a=0;a<g;a++)$(i,e,t,o,a)&&n.push({row:o,col:a});return n};window.showLegalMoves=function(e,t){r(`Showing legal moves for piece at [${e},${t}]`),E(),getLegalMoves(e,t).forEach(n=>{const o=!!window.board[n.row][n.col];z(n.row,n.col,o)})};function E(){document.querySelectorAll(".highlight").forEach(t=>t.remove())}window.getPieceColor=M;window.getPieceName=R;window.isWithinBoard=H;window.coordsToAlgebraic=K;window.placePieces=ge;window.createBoard=U;window.createPieceElement=ee;window.selectRandomChessboard=te;window.removeHighlights=E;window.highlightSquare=z;function ne(e,t,i,n){const o=window.board[e][t];return!o||M(o)!==window.currentPlayer?!1:$(o,e,t,i,n)}function $(e,t,i,n,o,a=!0,l=M(e)){if(r(`canPieceMove: Checking move for ${e} from [${t},${i}] to [${n},${o}] for playerColor=${l}`),!e)return r(`canPieceMove: No piece at [${t},${i}]`),!1;const s=e.toLowerCase(),w=M(e);if(w!==l)return r(`canPieceMove: Piece color ${w} does not match playerColor ${l}`),!1;if(!H(n,o)||t===n&&i===o)return r(`canPieceMove: Invalid destination [${n},${o}] or same square`),!1;const c=window.board[n][o];if(c&&M(c)===l)return r(`canPieceMove: Cannot capture own piece ${c} at [${n},${o}]`),!1;let u=!1;switch(s){case"p":u=ie(l,t,i,n,o),u&&c&&r(`canPieceMove: Pawn capture valid to ${c} at [${n},${o}]`);break;case"r":u=oe(t,i,n,o);break;case"n":u=re(t,i,n,o),u&&c&&r(`canPieceMove: Knight capture valid to ${c} at [${n},${o}]`);break;case"b":u=ae(t,i,n,o);break;case"q":u=le(t,i,n,o);break;case"k":u=se(l,t,i,n,o);break}return r(`canPieceMove: Piece ${e} from [${t},${i}] to [${n},${o}] isValid=${u}`),u?a&&ue(t,i,n,o,l)?(r(`canPieceMove: Move [${t},${i}] to [${n},${o}] exposes check for ${l}`),!1):(r(`canPieceMove: Move [${t},${i}] to [${n},${o}] allowed for ${l}`),!0):!1}function ie(e,t,i,n,o){const a=e==="blue"?-1:1,l=e==="blue"?6:1,s=n-t,w=o-i;if(Math.abs(w)===1){if(s!==a)return!1;const c=window.board[n][o];return c&&M(c)!==e?!0:!c&&b&&b.piece.toLowerCase()==="p"&&b.endRow===t&&b.endCol===o&&Math.abs(b.startRow-b.endRow)===2?(window.board[t][o]=null,!0):!1}return w!==0||window.board[n][o]?!1:s===a||t===l&&s===2*a&&!window.board[t+a][i]}function oe(e,t,i,n){return e!==i&&t!==n?!1:A(e,t,i,n)}function re(e,t,i,n){const o=Math.abs(i-e),a=Math.abs(n-t);return o===2&&a===1||o===1&&a===2}function ae(e,t,i,n){const o=Math.abs(i-e),a=Math.abs(n-t);return o!==a?!1:A(e,t,i,n)}function le(e,t,i,n){const o=Math.abs(i-e),a=Math.abs(n-t);return o!==a&&e!==i&&t!==n?!1:A(e,t,i,n)}function se(e,t,i,n,o){const a=Math.abs(n-t),l=Math.abs(o-i);if(a<=1&&l<=1)return!0;if(a===0&&l===2&&!I(e)){const s=e==="blue"?7:0;if(t!==s||i!==4||e==="blue"&&y.blueKingMoved||e==="red"&&y.redKingMoved)return!1;if(o===6)return e==="blue"&&y.blueRooksMove.right||e==="red"&&y.redRooksMove.right||!A(s,4,s,7)||window.board[s][7]!==(e==="blue"?"r":"R")?!1:!S(s,5,e==="blue"?"red":"blue")&&!S(s,6,e==="blue"?"red":"blue");if(o===2)return e==="blue"&&y.blueRooksMove.left||e==="red"&&y.redRooksMove.left||!A(s,0,s,4)||window.board[s][0]!==(e==="blue"?"r":"R")?!1:!S(s,2,e==="blue"?"red":"blue")&&!S(s,3,e==="blue"?"red":"blue")}return!1}function A(e,t,i,n){const o=Math.sign(i-e)||0,a=Math.sign(n-t)||0;let l=e+o,s=t+a;for(;l!==i||s!==n;){if(window.board[l][s])return!1;l+=o,s+=a}return!0}window.canMakeMove=ne;window.isValidPawnMove=ie;window.isValidRookMove=oe;window.isValidKnightMove=re;window.isValidBishopMove=ae;window.isValidQueenMove=le;window.isValidKingMove=se;window.isPathClear=A;window.canPieceMove=$;let x=!1;function S(e,t,i){if(x)return!1;x=!0;try{for(let n=0;n<g;n++)for(let o=0;o<g;o++){const a=window.board[n][o];if(a&&M(a)===i){if(a.toLowerCase()==="k"){const l=Math.abs(e-n),s=Math.abs(t-o);if(l<=1&&s<=1)return!0;continue}if($(a,n,o,e,t,!1))return!0}}return!1}finally{x=!1}}function I(e){const t=e==="blue"?"k":"K";let i,n;for(let o=0;o<g;o++){for(let a=0;a<g;a++)if(window.board[o][a]===t){i=o,n=a;break}if(i!==void 0)break}return S(i,n,e==="blue"?"red":"blue")}function ue(e,t,i,n,o){const a=window.board[i][n],l=window.board[e][t];window.board[i][n]=l,window.board[e][t]=null;const s=I(o);return window.board[e][t]=l,window.board[i][n]=a,s}function W(e){return I(e)?!Q(e):!1}function F(e){return I(e)?!1:!Q(e)}function Q(e){for(let t=0;t<g;t++)for(let i=0;i<g;i++){const n=window.board[t][i];if(n&&M(n)===e){for(let o=0;o<g;o++)for(let a=0;a<g;a++)if($(n,t,i,o,a))return!0}}return!1}function ce(e){const t=[];for(let i=0;i<g;i++)for(let n=0;n<g;n++){const o=window.board[i][n];if(o&&M(o)===e)for(let a=0;a<g;a++)for(let l=0;l<g;l++)$(o,i,n,a,l)&&t.push({piece:o,startRow:i,startCol:n,endRow:a,endCol:l,isCapture:!!window.board[a][l]})}return t}function J(){if(window.isMultiplayerMode){r("AI move skipped in multiplayer mode");return}if(d!==p.AI||window.currentPlayer!=="red"){r("Conditions not met for AI move");return}r("Making AI move...");const e=I("red");r(`AI thinking... (in check: ${e}, difficulty: ${h})`);const t=new Worker("aiWorker.js");t.postMessage({board:JSON.parse(JSON.stringify(window.board)),difficulty:h,currentPlayer:"red"}),t.onmessage=i=>{const n=i.data;n?(r("AI selected move: "+JSON.stringify(n)),setTimeout(()=>{q(n.startRow,n.startCol,n.endRow,n.endCol,n.promotionPiece)},500)):(r("No legal moves available for AI"),W("red")?L("blue"):F("red")&&L("draw")),t.terminate()},t.onerror=i=>{r("AI Worker error: "+i.message),console.error("Worker error:",i)}}window.isSquareUnderAttack=S;window.isKingInCheck=I;window.wouldMoveExposeCheck=ue;window.isCheckmate=W;window.isStalemate=F;window.hasLegalMoves=Q;window.getAllLegalMoves=ce;window.makeAIMove=J;function de(e){var s,w;if(r(`onPieceClick: Piece clicked, isMultiplayerMode: ${window.isMultiplayerMode}, playerColor: ${window.playerColor}, currentPlayer: ${window.currentPlayer}, gameMode: ${d}`),!V()){r("onPieceClick: Game access denied");return}if(window.isMultiplayerMode){if(r(`onPieceClick: Multiplayer mode, checking turn for playerColor=${window.playerColor}`),window.playerColor!==window.currentPlayer){r(`onPieceClick: Not your turn, currentPlayer=${window.currentPlayer}`),m("It's not your turn!");return}}else if(r(`onPieceClick: Non-multiplayer mode, gameMode=${d}, currentPlayer=${window.currentPlayer}`),d===p.AI&&window.currentPlayer!=="blue"){r("onPieceClick: AI mode, not Blue’s turn"),m("It's the AI's turn!");return}if(v!=="active"&&v!=="check"){r("onPieceClick: Game not active or in check"),m("Game is not active!");return}const t=e.target,i=parseInt(t.getAttribute("data-row")),n=parseInt(t.getAttribute("data-col")),o=window.board[i][n],a=M(o);r(`onPieceClick: Clicked piece ${o} at [${i},${n}], pieceColor=${a}`);const l=window.isMultiplayerMode?window.playerColor:window.playerColor||"blue";if(f&&a!==l){const c=parseInt(f.getAttribute("data-row")),u=parseInt(f.getAttribute("data-col")),k=window.board[c][u];r(`onPieceClick: Attempting move from [${c},${u}] (${k}) to [${i},${n}] (${o})`),$(k,c,u,i,n,!0,l)?(r(`onPieceClick: Move valid, calling ${window.isMultiplayerMode?"multiplayerManager.handleMove":"executeMove"}`),window.isMultiplayerMode?k.toLowerCase()==="p"&&(i===0||i===7)?C(c,u,i,n):(r(`onPieceClick: Calling multiplayerManager.handleMove, typeof: ${typeof((s=window.multiplayerManager)==null?void 0:s.handleMove)}`),typeof((w=window.multiplayerManager)==null?void 0:w.handleMove)=="function"?window.multiplayerManager.handleMove({startRow:c,startCol:u,endRow:i,endCol:n}):(r("onPieceClick: multiplayerManager.handleMove not available"),m("Error: Multiplayer move handler not available"))):k.toLowerCase()==="p"&&(i===0||i===7)?C(c,u,i,n):q(c,u,i,n)):r(`onPieceClick: Move invalid from [${c},${u}] to [${i},${n}]`),f.style.opacity="1",f=null,E();return}f&&(f.style.opacity="1",E()),a===l?f===t?(r(`onPieceClick: Deselecting piece ${o} at [${i},${n}]`),f=null):(r(`onPieceClick: Selecting piece ${o} at [${i},${n}]`),f=t,t.style.opacity="0.7",ce(a).filter(u=>u.startRow===i&&u.startCol===n).forEach(u=>z(u.endRow,u.endCol,u.isCapture))):(r(`onPieceClick: Cannot select piece ${o} at [${i},${n}], wrong color`),m("Select your own pieces!"))}function we(e,t){var i,n;if(r(`onSquareClick: Square [${e},${t}] clicked, isMultiplayerMode: ${window.isMultiplayerMode}, playerColor: ${window.playerColor}, currentPlayer: ${window.currentPlayer}, gameMode: ${d}`),r(`onSquareClick: GameMode.AI=${p.AI}, GameMode.ONLINE=${p.ONLINE}, board[${e}][${t}]=${window.board[e][t]}`),!V()){r("onSquareClick: Game access denied");return}if(window.isMultiplayerMode){if(r(`onSquareClick: Multiplayer mode, checking turn for playerColor=${window.playerColor}`),window.playerColor!==window.currentPlayer||window.multiplayerManager.isProcessingMove){r(`onSquareClick: Not your turn or processing move, currentPlayer=${window.currentPlayer}, isProcessingMove=${window.multiplayerManager.isProcessingMove}`),m("Waiting for opponent's move");return}}else if(r(`onSquareClick: Non-multiplayer mode, gameMode=${d}, currentPlayer=${window.currentPlayer}`),d===p.AI&&window.currentPlayer!=="blue"){r("onSquareClick: AI mode, not Blue’s turn"),m("It's the AI's turn!");return}if(v!=="active"&&v!=="check"){r("onSquareClick: Game not active or in check"),m("Game is not active!");return}if(f){const o=parseInt(f.getAttribute("data-row")),a=parseInt(f.getAttribute("data-col")),l=window.board[o][a],s=window.board[e][t];r(`onSquareClick: Attempting move from [${o},${a}] (${l}) to [${e},${t}] (${s})`);const w=window.isMultiplayerMode?window.playerColor:window.playerColor||"blue";$(l,o,a,e,t,!0,w)?(r(`onSquareClick: Move valid, calling ${window.isMultiplayerMode?"multiplayerManager.handleMove":"executeMove"}`),window.isMultiplayerMode?l.toLowerCase()==="p"&&(e===0||e===7)?C(o,a,e,t):(r(`onSquareClick: Calling multiplayerManager.handleMove, typeof: ${typeof((i=window.multiplayerManager)==null?void 0:i.handleMove)}`),typeof((n=window.multiplayerManager)==null?void 0:n.handleMove)=="function"?window.multiplayerManager.handleMove({startRow:o,startCol:a,endRow:e,endCol:t}):(r("onSquareClick: multiplayerManager.handleMove not available"),m("Error: Multiplayer move handler not available"))):l.toLowerCase()==="p"&&(e===0||e===7)?C(o,a,e,t):q(o,a,e,t)):r(`onSquareClick: Move invalid from [${o},${a}] to [${e},${t}]`),f.style.opacity="1",f=null,E()}else{const o=window.board[e][t],a=window.isMultiplayerMode?window.playerColor:window.playerColor||"blue";o&&M(o)===a?(r(`onSquareClick: Selecting piece ${o} at [${e},${t}]`),f=document.querySelector(`.piece[data-row="${e}"][data-col="${t}"]`),f&&(f.style.opacity="0.7",showLegalMoves(e,t))):r(`onSquareClick: No selectable piece at [${e},${t}]`)}}function C(e,t,i,n){r(`promptPawnPromotion: Showing promotion dialog for move from [${e},${t}] to [${i},${n}]`),document.querySelectorAll(".promotion-dialog").forEach(w=>w.remove());const a=document.createElement("div");a.className="promotion-dialog",a.style.position="absolute",a.style.top=`${i*12.5}%`,a.style.left=`${n*12.5}%`,a.style.zIndex="1000";const l=["q","r","n","b"],s=window.currentPlayer;l.forEach(w=>{const c=document.createElement("div");c.className="promotion-piece";const u=s==="blue"?w:w.toUpperCase();c.style.backgroundImage=`url('${B[u]}')`,c.onclick=()=>{var k;r(`promptPawnPromotion: Promoting to ${u} in ${window.isMultiplayerMode?"multiplayer":"AI"} mode`);try{window.isMultiplayerMode?typeof((k=window.multiplayerManager)==null?void 0:k.handleMove)=="function"?window.multiplayerManager.handleMove({startRow:e,startCol:t,endRow:i,endCol:n,promotionPiece:u}):(r("promptPawnPromotion: multiplayerManager.handleMove not available"),m("Error: Multiplayer move handler not available")):q(e,t,i,n,u)}catch(ye){r(`promptPawnPromotion: Error during promotion: ${ye.message}`)}finally{r("promptPawnPromotion: Removing promotion dialog"),a.remove()}},a.appendChild(c)}),document.getElementById("chessboard").appendChild(a)}function Me(){const e=document.getElementById("chessboard");e&&(e.addEventListener("touchstart",t=>{t.preventDefault();const i=t.touches[0],n=document.elementFromPoint(i.clientX,i.clientY);n&&n.classList.contains("piece")&&de({target:n})},{passive:!1}),e.addEventListener("touchend",t=>{t.preventDefault();const i=t.changedTouches[0],n=e.getBoundingClientRect(),o=n.width/8,a=Math.floor((i.clientX-n.left)/o),l=Math.floor((i.clientY-n.top)/o);H(l,a)&&we(l,a)},{passive:!1}))}function be(e,t,i,n,o,a){const l={piece:e,startRow:t,startCol:i,endRow:n,endCol:o,capturedPiece:a,notation:`${R(e)}${K(t,i)}${a?"x":"-"}${K(n,o)}`};P.push(l),b=l,r(`Move recorded: ${l.notation}`)}function fe(){const e=document.getElementById("move-history");if(!e){r("Move history element not found");return}const t=P.map((i,n)=>`${n+1}. ${i.notation}`).join(`
`);e.textContent=t||"No moves yet",e.scrollTop=e.scrollHeight,r(`Move history updated with ${P.length} moves: ${t}`)}window.updateMoveLog=fe;async function q(e,t,i,n,o=null){if(!ne(e,t,i,n))return r(`Invalid move: [${e},${t}] to [${i},${n}]`),!1;if(r(`Executing move: [${e},${t}] to [${i},${n}], promotion: ${o}, isMultiplayerMode: ${window.isMultiplayerMode}, currentGameMode: ${d}`),window.isMultiplayerMode&&window.multiplayerManager)return r("Delegating move to MultiplayerManager"),await window.multiplayerManager.handleMove({startRow:e,startCol:t,endRow:i,endCol:n,promotionPiece:o})?!0:(r("Multiplayer move failed"),m("Failed to process move. Please try again."),!1);const a=window.board[e][t],l=M(a),s=window.board[i][n];if(o?window.board[i][n]=o:window.board[i][n]=a,window.board[e][t]=null,a.toLowerCase()==="k"&&Math.abs(n-t)===2){const w=l==="blue"?7:0;n===6?(window.board[w][5]=window.board[w][7],window.board[w][7]=null):n===2&&(window.board[w][3]=window.board[w][0],window.board[w][0]=null)}return a.toLowerCase()==="k"&&(l==="blue"?y.blueKingMoved=!0:y.redKingMoved=!0),a.toLowerCase()==="r"&&(l==="blue"?(t===0&&(y.blueRooksMove.left=!0),t===7&&(y.blueRooksMove.right=!0)):(t===0&&(y.redRooksMove.left=!0),t===7&&(y.redRooksMove.right=!0))),a.toLowerCase()==="p"&&Math.abs(e-i)===2?y.lastPawnDoubleMove={row:i,col:n}:y.lastPawnDoubleMove=null,be(a,e,t,i,n,s),fe(),requestAnimationFrame(()=>{window.placePieces(),window.currentPlayer=window.currentPlayer==="blue"?"red":"blue",r(`executeMove: After player switch, currentPlayer=${window.currentPlayer}, currentGameMode=${d}, isMultiplayerMode=${window.isMultiplayerMode}`),W(window.currentPlayer)?(r("executeMove: Checkmate detected"),L(l)):F(window.currentPlayer)?(r("executeMove: Stalemate detected"),L("draw")):I(window.currentPlayer)?(r("executeMove: King in check"),v="check",m(`${window.currentPlayer.charAt(0).toUpperCase()+window.currentPlayer.slice(1)} is in check!`),d==="ai"&&window.currentPlayer==="red"&&(r("executeMove: Triggering AI move in check"),setTimeout(J,500))):(r("executeMove: Game active, setting status"),v="active",d==="ai"?window.currentPlayer==="red"?(r("executeMove: AI mode, red's turn, setting 'It's the AI's turn!'"),m("It's the AI's turn!"),setTimeout(J,500)):(r("executeMove: AI mode, blue's turn, setting 'Blue's turn'"),m("Blue's turn")):window.isMultiplayerMode?window.currentPlayer!==window.playerColor?(r("executeMove: Multiplayer mode, not player's turn, setting 'It's not your turn!'"),m("It's not your turn!")):(r("executeMove: Multiplayer mode, player's turn, setting player's turn"),m(`${window.currentPlayer.charAt(0).toUpperCase()+window.currentPlayer.slice(1)}'s turn`)):(r("executeMove: Default case, setting generic turn status"),m(`${window.currentPlayer.charAt(0).toUpperCase()+window.currentPlayer.slice(1)}'s turn`)))}),!0}function L(e){var n,o;v="ended";const t=e==="draw"?"Game ended in a draw":`${e.charAt(0).toUpperCase()+e.slice(1)} wins!`;m(t);const i=document.getElementById("chessboard");i&&(i.style.pointerEvents="none"),typeof window.updateGameResult=="function"&&window.updateGameResult({winner:e,player:window.currentPlayer==="blue"?"red":"blue",mode:d,difficulty:h}),window.isMultiplayerMode&&window.multiplayerManager&&window.multiplayerManager.handleGameEnd({winner:e==="blue"?(n=window.currentGameState)==null?void 0:n.blue_player:e==="red"?(o=window.currentGameState)==null?void 0:o.red_player:null})}function me(){return{buttons:{easyBtn:document.getElementById("easy-mode"),hardBtn:document.getElementById("hard-mode"),startBtn:document.getElementById("start-game"),restartBtn:document.getElementById("restart-game"),aiModeBtn:document.getElementById("ai-mode"),multiplayerModeBtn:document.getElementById("multiplayer-mode")},screens:{difficultyScreen:document.getElementById("difficulty-screen"),multiplayerMenu:document.querySelector(".multiplayer-menu"),chessGame:document.getElementById("chess-game")}}}function ve(){r("Setting up difficulty buttons...");const{buttons:e}=me(),{easyBtn:t,hardBtn:i,startBtn:n}=e;t&&i&&n?(n.disabled=!0,t.onclick=()=>{h="easy",N="easy",O("easy"),r(`Difficulty set to: ${h}`)},i.onclick=()=>{h="hard",N="hard",O("hard"),r(`Difficulty set to: ${h}`)},n.onclick=()=>{N&&(r(`Starting game with ${N} difficulty`),j())},r("Difficulty buttons setup complete")):r("Error: Could not find difficulty buttons")}function he(){const e=document.getElementById("multiplayer-mode"),t=document.getElementById("ai-mode");if(!e||!t){r("Mode buttons not found");return}e.onclick=()=>{d=p.ONLINE,window.isMultiplayerMode=!0,e.classList.add("selected"),t.classList.remove("selected"),r("Switched to multiplayer mode, isMultiplayerMode: "+window.isMultiplayerMode),T(),window.multiplayerManager&&window.multiplayerManager.checkPlayerGameState().catch(i=>r(`Failed to check game state: ${i.message}`))},t.onclick=()=>{d=p.AI,window.isMultiplayerMode=!1,window.playerColor="blue",t.classList.add("selected"),e.classList.remove("selected"),r("Switched to AI mode, isMultiplayerMode: "+window.isMultiplayerMode+", playerColor: "+window.playerColor),T(),pe()}}function j(){if(r(`
----- Starting new game -----`),!V())return;if(window.isMultiplayerMode){r("Skipping startGame in multiplayer mode");return}window.board=JSON.parse(JSON.stringify(G)),window.currentPlayer="blue",window.playerColor="blue",window.isMultiplayerMode=!1,d=p.AI,f=null,P=[],v="active",b=null,Object.assign(y,{blueKingMoved:!1,redKingMoved:!1,blueRooksMove:{left:!1,right:!1},redRooksMove:{left:!1,right:!1},lastPawnDoubleMove:null}),U(),window.placePieces(),document.getElementById("chess-game").style.display="block",document.getElementById("difficulty-screen").style.display="none",document.querySelector(".multiplayer-menu").style.display="none",m("Blue's turn"),r(`New game started - ${h} mode`);const e=document.getElementById("move-history");e&&(e.textContent="No moves yet",r("Move history cleared"));const t=document.getElementById("chessboard");t&&(t.style.pointerEvents="auto")}function pe(){if(r(`
----- Game Reset -----`),window.isMultiplayerMode){r("Skipping resetGame in multiplayer mode");return}window.board=JSON.parse(JSON.stringify(G)),window.currentPlayer="blue",window.playerColor="blue",window.isMultiplayerMode=!1,d=p.AI,f=null,P=[],v="active",b=null,Object.assign(y,{blueKingMoved:!1,redKingMoved:!1,blueRooksMove:{left:!1,right:!1},redRooksMove:{left:!1,right:!1},lastPawnDoubleMove:null}),m("Connect to play");const e=document.getElementById("move-history");e&&(e.textContent="No moves yet",r("Move history cleared"));const t=document.getElementById("chessboard");t&&(t.style.pointerEvents="auto",t.querySelectorAll(".piece, .highlight").forEach(n=>n.remove())),r("Game reset completed")}function _(){if(X){r("Game already initialized, skipping...");return}X=!0,r(`
----- Game Initialization -----`),window.currentPlayer="blue",window.playerColor="blue",window.isMultiplayerMode=!1,d=p.AI,U(),window.placePieces(),document.addEventListener("keydown",t=>{t.key==="Escape"&&f&&(f.style.opacity="1",f=null,E())}),he(),ve(),Me();const{buttons:e}=me();e.restartBtn&&(e.restartBtn.onclick=()=>{d===p.AI&&j()}),window.multiplayerManager&&Z()&&d===p.ONLINE&&window.multiplayerManager.checkPlayerGameState().catch(t=>r(`Failed to check game state on init: ${t.message}`)),r("Game initialization completed successfully")}window.startGame=j;window.initGame=_;window.resetGame=pe;function T(){const e=document.querySelector(".multiplayer-menu"),t=document.getElementById("chess-game");e.style.display=window.isMultiplayerMode?"block":"none",t.style.display=window.isMultiplayerMode?"none":"block",window.isMultiplayerMode&&window.multiplayerManager&&(window.multiplayerManager.updateMultiplayerMenu(null),window.multiplayerManager.fetchActiveGames())}window.updateMultiplayerMenu=T;window.setGameMode=function(e){if(e!==p.AI&&e!==p.ONLINE){r(`setGameMode: Invalid mode ${e}, must be ${p.AI} or ${p.ONLINE}`);return}r(`setGameMode: Changing gameMode from ${d} to ${e}`),d=e,window.isMultiplayerMode=e===p.ONLINE,e===p.AI&&(window.playerColor="blue",window.currentPlayer="blue"),r(`setGameMode: gameMode set to ${d}, isMultiplayerMode=${window.isMultiplayerMode}, playerColor=${window.playerColor}`)};window.pieceState=y;window.moveHistory=P;window.lastMove=b;window.promptPawnPromotion=C;window.loadGameState=function(e){r("Loading game state: "+JSON.stringify(e,null,2)),window.board=JSON.parse(JSON.stringify(e.board)),window.currentPlayer=e.currentPlayer,window.pieceState=JSON.parse(JSON.stringify(e.pieceState||y)),window.lastMove=e.lastMove||null,window.playerColor=e.playerColor,window.isMultiplayerMode=!0,d=p.ONLINE,v="active",P=[],window.placePieces(),m(`${window.currentPlayer.charAt(0).toUpperCase()+window.currentPlayer.slice(1)}'s turn`)};document.addEventListener("DOMContentLoaded",()=>{r("DOM Content Loaded - Initializing game..."),_()});(document.readyState==="complete"||document.readyState==="interactive")&&(r("Document already loaded - Running backup initialization..."),_());
